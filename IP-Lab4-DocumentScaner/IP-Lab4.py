# -*- coding: utf-8 -*-
"""Document.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13jOdYdHyxBxxi3FyrIcJwzue0_MF8UsD
"""

#import module
import sys
import cv2
import numpy as np
from matplotlib import pyplot as plt

def GetDocument(img):
    #get big different area
    imgTheshold = cv2.Canny(img, 100, 200)

    #get contour
    imgContours = img.copy()
    contours, hierarchy = cv2.findContours(imgTheshold, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    #merge to image to show it later
    imgContours = cv2.drawContours(imgContours, contours, -1, (0,255,0), 3)

    plt.show()

    #because image of document so biggest contours area most likely to the needed docoment
    biggest = np.array([])
    max_area = 0
    for i in contours:
        area = cv2.contourArea(i)
        if area > 5000:
            peri = cv2.arcLength(i, True)
            approx = cv2.approxPolyDP(i, 0.01 * peri, True)
            if area > max_area and len(approx) == 4:
                biggest = approx
                max_area = area

    #reorder biggest
    if len(biggest) == 0:
        print ("Cannot scan, try another image")
        return [], []
    biggest = biggest.reshape((4, 2))

    add = biggest.sum(1)

    myPointsNew = np.zeros((4, 1, 2), dtype=np.int32)

    myPointsNew[0] = biggest[np.argmin(add)]
    myPointsNew[2] = biggest[np.argmax(add)]
    diff = np.diff(biggest, axis=1)
    myPointsNew[3] = biggest[np.argmin(diff)]
    myPointsNew[1] = biggest[np.argmax(diff)]

    biggest = myPointsNew.reshape((4,1,2))

    '''
    order of biggest point is
    0 3
    1 2
    '''

    #update image contours with 4 blue point
    imgContours = cv2.drawContours(imgContours, biggest, -1, (255,0,0), 20)

    #calculate width, height of output image
    scale = 400
    dentalX = biggest[3][0][0] - biggest[0][0][0]
    dentalY = biggest[1][0][1] - biggest[0][0][1]

    ratio = dentalY / dentalX

    height = int(ratio * scale)
    width = int(scale)

    #map contour with raw image to get output
    pts1 = np.float32(biggest)
    pts2 = np.float32(([0,0], [0,height], [width, height], [width, 0]))

    matrix = cv2.getPerspectiveTransform(pts1, pts2)

    imgWarp = cv2.warpPerspective(img, matrix, (width, height))

    imgWarp=imgWarp[20:imgWarp.shape[0] - 10, 20:imgWarp.shape[1] - 10]
        
    #show output
    print("showing image")
    listImg = [img, imgTheshold, imgContours, imgWarp]
    listTitle = ["origin", "theshold", "countours", "ouput"]

    return listImg, listTitle

def ShowImage(listImg, listTitle):
    fig=plt.figure(figsize=(10, 8))

    columns = 2
    rows = 2
    ax = []

    for i in range(1, columns*rows +1):
        ax.append(fig.add_subplot(rows, columns, i))
        ax[-1].set_title(listTitle[i - 1])
        #remember to change color from BGR (cv) to RGB (plt)
        plt.imshow(cv2.cvtColor(listImg[i - 1], cv2.COLOR_BGR2RGB))

    plt.show() 

def main(argv):
    if (len(argv) <= 0):
        print("Please give the file path")
        return

    img = None
    #read image
    img = cv2.imread(argv[0])

    if img is None:
        print("Cannot file given file")
    else:
        print("Processing...")
        outputImgs, ouputTitle = GetDocument(img)

        if len(outputImgs) > 0:
            cv2.imwrite("ouput.jpg", outputImgs[-1])
            print("Output image is write at output.jpg")
            ShowImage(outputImgs, ouputTitle)
    return

if __name__ == "__main__":
   main(sys.argv[1:])
